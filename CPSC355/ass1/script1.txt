Script started on 2021-09-27 19:49:06-06:00
]0;leeca@csa1:~/ass1leeca@csa1:~/ass1$ gcc assign1a.s -o assign1a.out -g
]0;leeca@csa1:~/ass1leeca@csa1:~/ass1$ gdb assign1a.out
GNU gdb (GDB) Fedora 8.1.1-4.fc28
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "aarch64-redhat-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from assign1a.out...done.
(gdb) b main
Breakpoint 1 at 0x4005d4: file assign1a.s, line 19.
(gdb) b resetYDB
Breakpoint 2 at 0x400688: file assign1a.s, line 84.
(gdb) r
Starting program: /home/ugb/leeca/ass1/assign1a.out 
warning: the debug information found in "/usr/lib/debug//usr/lib64/ld-2.27.so.debug" does not match "/lib/ld-linux-aarch64.so.1" (CRC mismatch).

Missing separate debuginfos, use: dnf debuginfo-install glibc-2.27-38.fc28.aarch64
warning: the debug information found in "/usr/lib/debug//lib64/libc-2.27.so.debug" does not match "/lib64/libc.so.6" (CRC mismatch).

warning: the debug information found in "/usr/lib/debug//usr/lib64/libc-2.27.so.debug" does not match "/lib64/libc.so.6" (CRC mismatch).


Breakpoint 1, main () at assign1a.s:19
19	main:		stp	x29, x30, [sp,-16]!	// Stores current info for returning later
(gdb) ni
20			mov	x29, sp 	// Holy Code to start the program
(gdb) 
initialize () at assign1a.s:29
29	initialize:	mov	x19, -10	// x19 will be the x loop register.
(gdb) 
30			mov	x20, 0		// x20 will be the y register.
(gdb) 
31			mov	x21, -9000	// x21 will be the maximum register.
(gdb) 
32			mov	x22, 0		// x22 will be the loop power number
(gdb) 
33			mov	x23, 0		// x23 will be the power loop increment
(gdb) 
34			mov	x24, 0		// x24 will be used to store the caculuating power
(gdb) 
xLoopTest () at assign1a.s:37
37	xLoopTest:	cmp	x19, 10		// Does a subs on x19 and a hardcoded value
(gdb) 
38			b.le	calculateT1 	// Should branch to the print statement if x19 is less than 10
(gdb) 
calculateT1 () at assign1a.s:51
51	calculateT1:	mov	x24, x19	// Put the current x value into another register
(gdb) 
52			mov	x22, 4		// Store the exponent we want in x22
(gdb) p $x22[K[K24
$1 = -10
(gdb) p $x22[K[K19
$2 = -10
(gdb) ni
53			mov	x23, 1		// Reset the increment register for the power loop
(gdb) 
54			b	powers		// Branch to the power function and calulate x^4
(gdb) 
powers () at assign1a.s:41
41	powers:		cmp	x22, x23	// Compare the loop increment with the loop number
(gdb) p [K[K
42			b.le	bCheck		// Branch off of the loop if x22 is less than x23
(gdb) 
43			mul	x24, x24, x19	// You have to store the current x19 into x24 before running this function
(gdb) p $x24
$3 = -10
(gdb) ni
44			add	x23, x23, 1	// Increment the loop increment by 1. Don't forget to reset this before going into the function as well!
(gdb) p $x24
$4 = 100
(gdb) 
$5 = 100
(gdb) ni
45			b	powers
(gdb) 
41	powers:		cmp	x22, x23	// Compare the loop increment with the loop number
(gdb) 
42			b.le	bCheck		// Branch off of the loop if x22 is less than x23
(gdb) 
43			mul	x24, x24, x19	// You have to store the current x19 into x24 before running this function
(gdb) 
44			add	x23, x23, 1	// Increment the loop increment by 1. Don't forget to reset this before going into the function as well!
(gdb) pnip $x24
$6 = -1000
(gdb) ni
45			b	powers
(gdb) p $x23
$7 = 3
(gdb) ni
41	powers:		cmp	x22, x23	// Compare the loop increment with the loop number
(gdb) 
42			b.le	bCheck		// Branch off of the loop if x22 is less than x23
(gdb) 
43			mul	x24, x24, x19	// You have to store the current x19 into x24 before running this function
(gdb) 
44			add	x23, x23, 1	// Increment the loop increment by 1. Don't forget to reset this before going into the function as well!
(gdb) 
45			b	powers
(gdb) p $x23
$8 = 4
(gdb) p$x[K[K $x24
$9 = 10000
(gdb) ni
41	powers:		cmp	x22, x23	// Compare the loop increment with the loop number
(gdb) 
42			b.le	bCheck		// Branch off of the loop if x22 is less than x23
(gdb) 
bCheck () at assign1a.s:47
47	bCheck:		cmp	x22, 4		// Compare the power number with 4
(gdb) 
48			b.eq	calculateT2	// If the power number was 4, we continue on to T2
(gdb) 
calculateT2 () at assign1a.s:56
56	calculateT2:	mov	x28, -3		// for the mul opcode immediate
(gdb) 
57			mul	x25, x24, x28 	// This finishes calculating the first term of the polynomial
(gdb) 
58			mov	x24, x19	// Reset x24 back down the the current x value
(gdb) p $x25
$10 = -30000
(gdb) ni
59			mov	x22, 2		// This time we want to go up to 2 powers
(gdb) 
60			mov	x23, 1		// Reset the increment register for the power loop
(gdb) 
61			b	powers		// Branch to the power function and calculate x^2
(gdb) 
powers () at assign1a.s:41
41	powers:		cmp	x22, x23	// Compare the loop increment with the loop number
(gdb) 
42			b.le	bCheck		// Branch off of the loop if x22 is less than x23
(gdb) 
43			mul	x24, x24, x19	// You have to store the current x19 into x24 before running this function
(gdb) 
44			add	x23, x23, 1	// Increment the loop increment by 1. Don't forget to reset this before going into the function as well!
(gdb) p $x24
$11 = 100
(gdb) ni
45			b	powers
(gdb) 
41	powers:		cmp	x22, x23	// Compare the loop increment with the loop number
(gdb) 
42			b.le	bCheck		// Branch off of the loop if x22 is less than x23
(gdb) 
bCheck () at assign1a.s:47
47	bCheck:		cmp	x22, 4		// Compare the power number with 4
(gdb) 
48			b.eq	calculateT2	// If the power number was 4, we continue on to T2
(gdb) 
49			b	calculateT3	// Otherwise we go to T3
(gdb) 
calculateT3 () at assign1a.s:63
63	calculateT3:	mov	x28, 267	// mul opcode doesn't let you use immediate values lol
(gdb) 
64			mul	x26, x24, x28	// Finish calculating the second term of the polynomal
(gdb) 
65			mov 	x28, 47		// Changing x28 for the third term.
(gdb) 
66			mul	x27, x19, x28	// This calculates the third term of the polynomal
(gdb) 
67			add	x27, x27, -43	// Since we don't have to store any more powers, we can just subtract 43 from the other stored value
(gdb) p $x26
$12 = 26700
(gdb) p $x27
$13 = -470
(gdb) ni
calculateY () at assign1a.s:69
69	calculateY:	add	x25, x25, x26	// Finally, simple addition to calculate the current y value.
(gdb) p x[K$x27
$14 = -513
(gdb) ni
70			add	x25, x25, x27	// Adding 25, 26 and 27 together.
(gdb) p[Kni
compareMax () at assign1a.s:72
72	compareMax:	cmp	x25, x21	// Compare the current y value with the current maximum
(gdb) p $x25
$15 = -3813
(gdb) ni[K[Kp $x21
$16 = -9000
(gdb) ni
73			b.le	printDB		// if the current y is lower, branch over replacing the max
(gdb) ni
74			mov	x21, x25	// else, replace the maximum with the new y value.
(gdb) ni
printDB () at assign1a.s:76
76	printDB:	mov	w1, w19		// This this puts registers 19-21 into w 1-3. x=1, y=2 max=3
(gdb) p $x29[K1
$17 = -3813
(gdb) ni
77			mov	w2, w25		// It should update as we procede through the loop.
(gdb) 
78			mov	w3, w21		// We use w registers because the print function is weird.
(gdb) 
80			adrp	x0, formatter	// Following three lines are used to call printf
(gdb) p $x1
$18 = 4294967286
(gdb) p $x2
$19 = 4294963483
(gdb) p[Kp $w1
$20 = 4294967286
(gdb) p $x3
$21 = 4294963483
(gdb) ni
81			add	x0, x0, :lo12:formatter // Puts something into x0 to print
(gdb) 
82			bl	printf		// Prints
(gdb) 
Current x value: -10	 Current y value: -3813	 Current maximum: -3813 

Breakpoint 2, resetYDB () at assign1a.s:84
84	resetYDB:	mov	x25, 0		// Reset the Y value before looping again.
(gdb) p $w1
$22 = 0
(gdb) ni
incrementDB () at assign1a.s:86
86	incrementDB:	add	x19, x19, 1	// Increments x register by one.
(gdb) 
87			b	xLoopTest	// Then we should branch back to the test condition.
(gdb) 
xLoopTest () at assign1a.s:37
37	xLoopTest:	cmp	x19, 10		// Does a subs on x19 and a hardcoded value
(gdb) quit[K[K[K[Kp [K $x19
$23 = -9
(gdb) ni
38			b.le	calculateT1 	// Should branch to the print statement if x19 is less than 10
(gdb) 
calculateT1 () at assign1a.s:51
51	calculateT1:	mov	x24, x19	// Put the current x value into another register
(gdb) 
52			mov	x22, 4		// Store the exponent we want in x22
(gdb) quick[Kt[K[Kt
A debugging session is active.

	Inferior 1 [process 13759] will be killed.

Quit anyway? (y or n) y
]0;leeca@csa1:~/ass1leeca@csa1:~/ass1$ exit
exit

Script done on 2021-09-27 19:57:17-06:00
